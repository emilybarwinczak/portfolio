{"ast":null,"code":"const track = document.querySelector('.carousel__track');\nconst slides = Array.from(track.children);\nconst nextButton = document.querySelector('.carousel__button--right');\nconst prevButton = document.querySelector('.carousel__button--left');\nconst dotsNav = document.querySelector('.carousel__nav');\nconst dots = Array.from(dotsNav.children);\nconst slideWidth = slides[0].getBoundingClientRect().width; //---ALWAYS-----------------------------------------------------\n//Arrange the slides next to one another\n\nconst setSlidePosition = (slide, index) => {\n  slide.style.left = slideWidth * index + 'px';\n};\n\nslides.forEach(setSlidePosition); //Same as...\n// slides[0].style.left = slideWidth * 0 + \"px\";\n// slides[1].style.left = slideWidth * 1 + \"px\";...\n//^--ALWAYS-----------------------------------------------------\n//ftn change CSS to move slides\n\nconst moveToSlide = (track, currentSlide, targetSlide) => {\n  track.style.transform = 'translateX(-' + targetSlide.style.left + ')';\n  currentSlide.classList.remove('current-slide');\n  targetSlide.classList.add('current-slide');\n}; //ftn change CSS on dots to show current slide\n\n\nconst updateDots = (currentDot, targetDot) => {\n  currentDot.classList.remove('current-slide');\n  targetDot.classList.add('current-slide');\n}; //ftn show which buttons to have active\n\n\nconst hideShowArrows = (slides, targetIndex, prevButton, nextButton) => {\n  if (targetIndex === 0) {\n    prevButton.classList.add('is-hidden');\n    nextButton.classList.remove('is-hidden');\n  } else if (targetIndex === slides.length - 1) {\n    prevButton.classList.remove('is-hidden');\n    nextButton.classList.add('is-hidden');\n  } else {\n    prevButton.classList.remove('is-hidden');\n    nextButton.classList.remove('is-hidden');\n  }\n}; //When I click left, move slides to the left\n\n\nprevButton.addEventListener('click', e => {\n  const currentSlide = track.querySelector('.current-slide');\n  const prevSlide = currentSlide.previousElementSibling;\n  const currentDot = dotsNav.querySelector('.current-slide');\n  const prevDot = currentDot.previousElementSibling;\n  const targetIndex = slides.findIndex(slide => slide === prevSlide); //Move to next slide\n\n  moveToSlide(track, currentSlide, prevSlide); //Show which dot is now current\n\n  updateDots(currentDot, prevDot); //Make scrolling buttons invisible when necessary\n\n  hideShowArrows(slides, targetIndex, prevButton, nextButton);\n}); //When I click right, move slides to the right\n\nnextButton.addEventListener('click', e => {\n  const currentSlide = track.querySelector('.current-slide');\n  const nextSlide = currentSlide.nextElementSibling;\n  const currentDot = dotsNav.querySelector('.current-slide');\n  const nextDot = currentDot.nextElementSibling;\n  const targetIndex = slides.findIndex(slide => slide === nextSlide); //Move to the next slide\n\n  moveToSlide(track, currentSlide, nextSlide); //Show which dot is now current\n\n  updateDots(currentDot, nextDot); //Make scrolling buttons invisible when necessary\n\n  hideShowArrows(slides, targetIndex, prevButton, nextButton);\n}); //When I click the nav indicators, move to that slide\n\ndotsNav.addEventListener('click', e => {\n  //What indicator was clicked on?\n  const targetDot = e.target.closest('button'); //Stop running if we don't need anything to happen\n\n  if (!targetDot) return; //targetDot = null if click anywhere in dotsNav besides on dots\n\n  const currentSlide = track.querySelector('.current-slide');\n  const currentDot = dotsNav.querySelector('.current-slide');\n  const targetIndex = dots.findIndex(dot => dot === targetDot);\n  const targetSlide = slides[targetIndex]; //Move to target slide\n\n  moveToSlide(track, currentSlide, targetSlide); //Show which dot is now current\n\n  updateDots(currentDot, targetDot); //Make scrolling buttons invisible when necessary\n\n  hideShowArrows(slides, targetIndex, prevButton, nextButton);\n});","map":{"version":3,"sources":["/Users/ebarw/Documents/job_stuff/portfolio/eb-portfolio/src/components/projects/Projects.js"],"names":["track","document","querySelector","slides","Array","from","children","nextButton","prevButton","dotsNav","dots","slideWidth","getBoundingClientRect","width","setSlidePosition","slide","index","style","left","forEach","moveToSlide","currentSlide","targetSlide","transform","classList","remove","add","updateDots","currentDot","targetDot","hideShowArrows","targetIndex","length","addEventListener","e","prevSlide","previousElementSibling","prevDot","findIndex","nextSlide","nextElementSibling","nextDot","target","closest","dot"],"mappings":"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","sourcesContent":["const track = document.querySelector('.carousel__track');\nconst slides = Array.from(track.children);\nconst nextButton = document.querySelector('.carousel__button--right');\nconst prevButton = document.querySelector('.carousel__button--left');\nconst dotsNav = document.querySelector('.carousel__nav');\nconst dots = Array.from(dotsNav.children);\n\nconst slideWidth = slides[0].getBoundingClientRect().width;\n\n//---ALWAYS-----------------------------------------------------\n//Arrange the slides next to one another\nconst setSlidePosition = (slide, index) => {\n  slide.style.left = slideWidth * index + 'px';\n}\nslides.forEach(setSlidePosition);\n//Same as...\n// slides[0].style.left = slideWidth * 0 + \"px\";\n// slides[1].style.left = slideWidth * 1 + \"px\";...\n//^--ALWAYS-----------------------------------------------------\n\n\n//ftn change CSS to move slides\nconst moveToSlide = (track, currentSlide, targetSlide) => {\n  track.style.transform = 'translateX(-' + targetSlide.style.left + ')';\n  currentSlide.classList.remove('current-slide');\n  targetSlide.classList.add('current-slide');\n}\n//ftn change CSS on dots to show current slide\nconst updateDots = (currentDot, targetDot) => {\n  currentDot.classList.remove('current-slide');\n  targetDot.classList.add('current-slide');\n}\n\n//ftn show which buttons to have active\nconst hideShowArrows = (slides, targetIndex, prevButton, nextButton) => {\n  if (targetIndex === 0) {\n    prevButton.classList.add('is-hidden');\n    nextButton.classList.remove('is-hidden');\n  } else if (targetIndex === slides.length - 1) {\n    prevButton.classList.remove('is-hidden');\n    nextButton.classList.add('is-hidden');\n  } else {\n    prevButton.classList.remove('is-hidden');\n    nextButton.classList.remove('is-hidden');\n  }\n}\n\n//When I click left, move slides to the left\nprevButton.addEventListener('click', e => {\n  const currentSlide = track.querySelector('.current-slide');\n  const prevSlide = currentSlide.previousElementSibling;\n  const currentDot = dotsNav.querySelector('.current-slide');\n  const prevDot = currentDot.previousElementSibling;\n  const targetIndex = slides.findIndex(slide => slide === prevSlide);\n\n  //Move to next slide\n  moveToSlide(track, currentSlide, prevSlide);\n  //Show which dot is now current\n  updateDots(currentDot, prevDot);\n  //Make scrolling buttons invisible when necessary\n  hideShowArrows(slides, targetIndex, prevButton, nextButton);\n})\n\n//When I click right, move slides to the right\nnextButton.addEventListener('click', e => {\n  const currentSlide = track.querySelector('.current-slide');\n  const nextSlide = currentSlide.nextElementSibling;\n  const currentDot = dotsNav.querySelector('.current-slide');\n  const nextDot = currentDot.nextElementSibling;\n  const targetIndex = slides.findIndex(slide => slide === nextSlide);\n\n  //Move to the next slide\n  moveToSlide(track, currentSlide, nextSlide);\n  //Show which dot is now current\n  updateDots(currentDot, nextDot);\n  //Make scrolling buttons invisible when necessary\n  hideShowArrows(slides, targetIndex, prevButton, nextButton);\n})\n\n//When I click the nav indicators, move to that slide\ndotsNav.addEventListener('click', e => {\n  //What indicator was clicked on?\n  const targetDot = e.target.closest('button');\n  //Stop running if we don't need anything to happen\n  if(!targetDot) return; //targetDot = null if click anywhere in dotsNav besides on dots\n\n  const currentSlide = track.querySelector('.current-slide');\n  const currentDot = dotsNav.querySelector('.current-slide');\n  const targetIndex = dots.findIndex(dot => dot === targetDot);\n  const targetSlide = slides[targetIndex];\n\n  //Move to target slide\n  moveToSlide(track, currentSlide, targetSlide);\n  //Show which dot is now current\n  updateDots(currentDot, targetDot);\n  //Make scrolling buttons invisible when necessary\n  hideShowArrows(slides, targetIndex, prevButton, nextButton);\n})"]},"metadata":{},"sourceType":"module"}